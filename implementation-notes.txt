
Book 
    String title
    String ISBN
    String author
    -
    get/set()
    printDetails()

PhysicalBook extends Book
    Member user
    String condition
    -
    set/get() // The setter method for the damages should concatenate the value of its string parameter to any previously recorded damages.
    boolean isAvailable() // return user == null
    printDetails() // All fields laid out nicely, deal with null Member neatly

ElectronicBook extends Book
    List<ElectronicDevice> devices
    -
    set/get() // if applicable
    addDevice(ElectronicDevice newDevice)
    printDetails() // Could be in an interface shared by both books

ElectronicDevice
    String deviceType
    String location
    Member user
    boolean available
    -
    set/get()
    boolean isAvailable()
    printDetails()

Member
    String name
    List<Book> books
    List<String> messages
    -
    get/set()
    printDetails()
    printMessages()
    addBook(Book newlyBorrowedBook)
    printBookDetails()
    int borrowedBookCount()

Library
    List<Book> catalogue
    -
    get/set()
    getCatalogueCount() 
    boolean catalogueContains(Book book)
    Book inspectBook(Book book) // return null if not in catalogue
    boolean removeBook(Book book) // this one removes the book from the catalogue, inspectBook() does not
    boolean removeBookAtIndex(int index) // WTF is this for? return false if index out of bounds.
    printBookDetails(String ISBN) // prints details and total number of this resource found. 5 copies, for instance. (maybe also print how many available?) If Electronic, just says "eBook"
    printAllPhysicalBookDetails()
    printAllElectronicBookDetails()
    printAllAvailableBookDeatils() // Will need to check isAvaialble() for each book, only for physicalBooks though
    printAuthorDeatils(String author)
    printDetails()
    boolean changeTitle(Book book, String newTitle) // Changes title, prints details of book (before, then after), returns true if successful. Prints ("Not available") and returns false if not.
    /*
        A method that simulates adding a resource to the catalogue. The method accepts an
        object as a parameter and appends this object at the end of the library catalogue. If
        the object already exists in the catalogue, the method should reject it and print an
        appropriate error message.
        Just do a catalogue.contains (or whatever the method is) and see if the object already exists.
    */
    boolean addBook(Book book) 
    boolean lendBook(Member member, PhysicalBook book) // Members can only borrow <=5 books
    boolean returnBook(PhysicalBook book, boolean recordDamages, String damageNote) // Can only return book if it's in the catalogue
    sendMessage(String message) // Sends to all Members holding physical books
